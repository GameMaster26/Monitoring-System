# Generated by Django 5.1 on 2024-11-05 09:46

import django.contrib.gis.db.models.fields
import django.db.models.deletion
import monitoring.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Barangay',
            fields=[
                ('brgy_id', models.AutoField(primary_key=True, serialize=False)),
                ('brgy_name', models.CharField(max_length=100, verbose_name='Barangay Name')),
                ('boundary', django.contrib.gis.db.models.fields.MultiPolygonField(null=True, srid=4326, verbose_name='Boundary')),
            ],
            options={
                'verbose_name_plural': 'Barangays',
            },
        ),
        migrations.CreateModel(
            name='Logo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('logo_name', models.CharField(max_length=150, verbose_name='Logo Name')),
                ('logo_image', models.ImageField(blank=True, null=True, upload_to='municipality_logo', verbose_name='Municipality Logo')),
            ],
            options={
                'verbose_name_plural': 'Logos',
            },
        ),
        migrations.CreateModel(
            name='Municipality',
            fields=[
                ('muni_id', models.AutoField(primary_key=True, serialize=False)),
                ('muni_name', models.CharField(max_length=100, verbose_name='Municipality Name')),
                ('geom', django.contrib.gis.db.models.fields.MultiPolygonField(blank=True, null=True, srid=4326, verbose_name='Geom')),
            ],
            options={
                'verbose_name_plural': 'Municipalities',
            },
        ),
        migrations.CreateModel(
            name='Doctor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=100, verbose_name='First Name')),
                ('middle_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Middle Name')),
                ('last_name', models.CharField(max_length=100, verbose_name='Last Name')),
                ('date_of_birth', models.DateField(blank=True, null=True, verbose_name='Date of Birth')),
                ('gender', models.CharField(choices=[('male', 'Male'), ('female', 'Female')], max_length=20, null=True, verbose_name='Sex')),
                ('contact_number', models.CharField(blank=True, max_length=12, validators=[monitoring.models.validate_contact_number], verbose_name='Contact Number')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Email')),
                ('brgy_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='doctors_brgy', to='monitoring.barangay', verbose_name='Barangay')),
                ('muni_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='doctors_muni', to='monitoring.municipality', verbose_name='Municipality')),
            ],
            options={
                'verbose_name_plural': 'Doctors',
            },
        ),
        migrations.AddField(
            model_name='barangay',
            name='muni_id',
            field=models.ForeignKey(db_column='muni_id', on_delete=django.db.models.deletion.CASCADE, related_name='barangays', to='monitoring.municipality', verbose_name='Municipality Name'),
        ),
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('patient_id', models.AutoField(primary_key=True, serialize=False)),
                ('first_name', models.CharField(max_length=200, verbose_name='First Name')),
                ('middle_name', models.CharField(max_length=200, verbose_name='Middle Name')),
                ('last_name', models.CharField(max_length=200, verbose_name='Last Name')),
                ('birthday', models.DateField(verbose_name='Birthday')),
                ('sex', models.CharField(choices=[('male', 'Male'), ('female', 'Female')], max_length=20, verbose_name='Sex')),
                ('contactNumber', models.CharField(max_length=12, validators=[monitoring.models.validate_contact_number], verbose_name='Contact Number')),
                ('brgy_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='patients_brgy', to='monitoring.barangay', verbose_name='Barangay')),
                ('doctor', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='doctors_patient', to='monitoring.doctor', verbose_name='Doctor')),
                ('muni_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='patients_muni', to='monitoring.municipality', verbose_name='Municipality')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='patients', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name_plural': 'Patient Records',
            },
        ),
        migrations.CreateModel(
            name='Treatment',
            fields=[
                ('treatment_id', models.AutoField(primary_key=True, serialize=False)),
                ('vaccine_generic_name', models.CharField(choices=[('PCECCV', 'PCECCV'), ('PVRV', 'PVRV')], max_length=10, verbose_name='Vaccine Generic Name')),
                ('vaccine_brand_name', models.CharField(choices=[('Verorab', 'Verorab'), ('Speeda', 'Speeda'), ('Vaxirab', 'Vaxirab'), ('Abhayrab', 'Abhayrab')], max_length=10, verbose_name='Vaccine Brand Name')),
                ('vaccine_route', models.CharField(choices=[('intramuscular', 'Intramuscular'), ('intradermal', 'Intradermal')], max_length=50, verbose_name='Vaccine Route')),
                ('tcv_given', models.DateField(blank=True, null=True, verbose_name='TCV')),
                ('day0', models.DateField(blank=True, null=True, verbose_name='Day 0')),
                ('day0_arrived', models.BooleanField(default=False, verbose_name='')),
                ('day3', models.DateField(blank=True, null=True, verbose_name='Day 3')),
                ('day3_arrived', models.BooleanField(default=False, verbose_name='')),
                ('day7', models.DateField(blank=True, null=True, verbose_name='Day 7')),
                ('day7_arrived', models.BooleanField(default=False, verbose_name='')),
                ('day14', models.DateField(blank=True, null=True, verbose_name='Day 14')),
                ('day28', models.DateField(blank=True, null=True, verbose_name='Day 28')),
                ('booster1', models.DateField(blank=True, null=True, verbose_name='Booster1')),
                ('booster2', models.DateField(blank=True, null=True, verbose_name='Booster2')),
                ('hrig_given', models.DateField(blank=True, null=True, verbose_name='HRIG')),
                ('rig_given', models.DateField(blank=True, null=True, verbose_name='ERIG')),
                ('animal_alive', models.BooleanField(null=True, verbose_name='Animal alive')),
                ('remarks', models.TextField(blank=True)),
                ('patient_id', models.ForeignKey(db_column='patient_id', on_delete=django.db.models.deletion.CASCADE, related_name='treatments_patient', to='monitoring.patient', verbose_name='Patient')),
            ],
            options={
                'verbose_name_plural': "Patient's Treatment",
                'ordering': ['-patient_id'],
            },
        ),
        migrations.CreateModel(
            name='UserMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject', models.CharField(max_length=255)),
                ('message', models.TextField()),
                ('sent_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-sent_at'],
            },
        ),
        migrations.AlterUniqueTogether(
            name='barangay',
            unique_together={('brgy_name', 'muni_id')},
        ),
        migrations.CreateModel(
            name='History',
            fields=[
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('registration_no', models.CharField(blank=True, max_length=200, null=True, verbose_name='Registration Number')),
                ('date_registered', models.DateField(verbose_name='Date Registered')),
                ('date_of_exposure', models.DateField(blank=True, null=True, verbose_name='Date of Exposure')),
                ('category_of_exposure', models.CharField(choices=[('I', 'I'), ('II', 'II'), ('III', 'III')], max_length=10, verbose_name='Exposure Category')),
                ('source_of_exposure', models.CharField(choices=[('Dog', 'Dog'), ('Cat', 'Cat'), ('Bat', 'Bat'), ('Monkey', 'Monkey'), ('Human', 'Human'), ('Horse', 'Horse'), ('Cow', 'Cow'), ('Goat', 'Goat'), ('Pig', 'Pig'), ('Sheep', 'Sheep'), ('Chicken', 'Chicken'), ('Rabbit', 'Rabbit'), ('Guinea Pig', 'Guinea Pig'), ('Ferret', 'Ferret'), ('Parrot', 'Parrot'), ('Turkey', 'Turkey')], max_length=10, verbose_name='Animal')),
                ('exposure_type', models.CharField(choices=[('Bite', 'Bite'), ('Non-Bite', 'Non-Bite')], max_length=10, verbose_name='Type of Exposure')),
                ('bite_site', models.CharField(choices=[('Front of Head', 'Front of Head'), ('Back of Head', 'Back of Head'), ('Face', 'Face'), ('Jaw', 'Jaw'), ('Mouth', 'Mouth'), ('Eye', 'Eye'), ('Cheek', 'Cheek'), ('Forehead', 'Forehead'), ('Temple', 'Temple'), ('Behind Ear', 'Behind Ear'), ('Front of Neck', 'Front of Neck'), ('Back of Neck', 'Back of Neck'), ('Shoulder (Left)', 'Shoulder (Left)'), ('Shoulder (Right)', 'Shoulder (Right)'), ('Upper Arm (Left)', 'Upper Arm (Left)'), ('Upper Arm (Right)', 'Upper Arm (Right)'), ('Elbow (Left)', 'Elbow (Left)'), ('Elbow (Right)', 'Elbow (Right)'), ('Forearm (Left)', 'Forearm (Left)'), ('Forearm (Right)', 'Forearm (Right)'), ('Wrist (Left)', 'Wrist (Left)'), ('Wrist (Right)', 'Wrist (Right)'), ('Palm (Left)', 'Palm (Left)'), ('Palm (Right)', 'Palm (Right)'), ('Back of Hand (Left)', 'Back of Hand (Left)'), ('Back of Hand (Right)', 'Back of Hand (Right)'), ('Thumb (Left)', 'Thumb (Left)'), ('Thumb (Right)', 'Thumb (Right)'), ('Index Finger (Left)', 'Index Finger (Left)'), ('Index Finger (Right)', 'Index Finger (Right)'), ('Middle Finger (Left)', 'Middle Finger (Left)'), ('Middle Finger (Right)', 'Middle Finger (Right)'), ('Ring Finger (Left)', 'Ring Finger (Left)'), ('Ring Finger (Right)', 'Ring Finger (Right)'), ('Little Finger (Left)', 'Little Finger (Left)'), ('Little Finger (Right)', 'Little Finger (Right)'), ('Chest (Front)', 'Chest (Front)'), ('Chest (Side)', 'Chest (Side)'), ('Abdomen (Front)', 'Abdomen (Front)'), ('Lower Back', 'Lower Back'), ('Hip (Left)', 'Hip (Left)'), ('Hip (Right)', 'Hip (Right)'), ('Thigh (Left, Front)', 'Thigh (Left, Front)'), ('Thigh (Left, Back)', 'Thigh (Left, Back)'), ('Thigh (Right, Front)', 'Thigh (Right, Front)'), ('Thigh (Right, Back)', 'Thigh (Right, Back)'), ('Knee (Left, Front)', 'Knee (Left, Front)'), ('Knee (Left, Back)', 'Knee (Left, Back)'), ('Knee (Right, Front)', 'Knee (Right, Front)'), ('Knee (Right, Back)', 'Knee (Right, Back)'), ('Calf (Left)', 'Calf (Left)'), ('Calf (Right)', 'Calf (Right)'), ('Leg (Left)', 'Leg (Left)'), ('Leg (Right)', 'Leg (Right)'), ('Leg Lower(Left)', 'Leg Lower(Left)'), ('Leg Lower(Right)', 'Leg Lower(Right)'), ('Leg Upper(Left)', 'Leg Upper(Left)'), ('Leg Upper(Right)', 'Leg Upper(Right)'), ('Leg Anterior(Left)', 'Leg Anterior(Left)'), ('Leg Anterior(Right)', 'Leg Anterior(Right)'), ('Leg Posterior(Left)', 'Leg Posterior(Left)'), ('Leg Posterior(Right)', 'Leg Posterior(Right)'), ('Ankle (Left)', 'Ankle (Left)'), ('Ankle (Right)', 'Ankle (Right)'), ('Foot (Left)', 'Foot (Left)'), ('Foot (Right)', 'Foot (Right)'), ('Toes (Left)', 'Toes (Left)'), ('Toes (Right)', 'Toes (Right)'), ('Ball of Foot (Left)', 'Ball of Foot (Left)'), ('Ball of Foot (Right)', 'Ball of Foot (Right)'), ('Heel (Left)', 'Heel (Left)'), ('Heel (Right)', 'Heel (Right)')], max_length=50, verbose_name='Bite Site')),
                ('provoked_status', models.CharField(choices=[('Provoked', 'Provoked'), ('Unprovoked', 'Unprovoked')], max_length=20, verbose_name='Provocation Status')),
                ('immunization_status', models.CharField(choices=[('Immunized', 'Immunized'), ('Unimmunized', 'Unimmunized')], max_length=20, verbose_name='Animal Vaccination')),
                ('status_of_animal', models.CharField(choices=[('Alive', 'Alive'), ('Dead', 'Dead'), ('Killed', 'Killed'), ('Lost', 'Lost')], max_length=20, verbose_name='Animal Status')),
                ('confinement_status', models.CharField(choices=[('Stray', 'Stray'), ('Leashed/Caged', 'Leashed/Caged')], max_length=20, verbose_name='Confinement Status')),
                ('washing_hands', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, verbose_name='Washing Wound')),
                ('human_rabies', models.BooleanField(default=False, verbose_name='Human Rabies')),
                ('latitude', models.FloatField(blank=True, default=0.0, verbose_name='Latitude')),
                ('longitude', models.FloatField(blank=True, default=0.0, verbose_name='Longitude')),
                ('geom', django.contrib.gis.db.models.fields.PointField(srid=4326, verbose_name='Geometry')),
                ('brgy_id', models.ForeignKey(db_column='brgy_id', on_delete=django.db.models.deletion.CASCADE, related_name='history_brgy', to='monitoring.barangay', verbose_name='Barangay Exposure')),
                ('muni_id', models.ForeignKey(db_column='muni_id', on_delete=django.db.models.deletion.CASCADE, related_name='history_muni', to='monitoring.municipality', verbose_name='Municipality of Exposure')),
                ('patient_id', models.ForeignKey(db_column='patient_id', on_delete=django.db.models.deletion.CASCADE, related_name='histories', to='monitoring.patient', verbose_name='Patient')),
            ],
            options={
                'verbose_name_plural': "Patient's History",
                'ordering': ['-registration_no'],
                'unique_together': {('registration_no', 'patient_id')},
            },
        ),
    ]
