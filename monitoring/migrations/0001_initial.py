# Generated by Django 5.0.6 on 2024-08-27 03:46

import datetime
import django.contrib.gis.db.models.fields
import django.db.models.deletion
import monitoring.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Municipality',
            fields=[
                ('muni_id', models.AutoField(primary_key=True, serialize=False)),
                ('muni_name', models.CharField(max_length=100, verbose_name='Municipality Name')),
                ('geom', django.contrib.gis.db.models.fields.PointField(blank=True, null=True, srid=4326, verbose_name='Geometry')),
            ],
            options={
                'verbose_name_plural': 'Municipalities',
            },
        ),
        migrations.CreateModel(
            name='Barangay',
            fields=[
                ('brgy_id', models.AutoField(primary_key=True, serialize=False)),
                ('brgy_name', models.CharField(max_length=100, verbose_name='Barangay Name')),
                ('tmp_muni', models.CharField(max_length=100, verbose_name='Tmp muni')),
                ('muni_id', models.ForeignKey(db_column='muni_id', on_delete=django.db.models.deletion.CASCADE, related_name='barangays', to='monitoring.municipality', verbose_name='Municipality Name')),
            ],
            options={
                'verbose_name_plural': 'Barangays',
                'unique_together': {('brgy_name', 'muni_id')},
            },
        ),
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('patient_id', models.AutoField(primary_key=True, serialize=False)),
                ('first_name', models.CharField(max_length=200, verbose_name='First Name')),
                ('last_name', models.CharField(max_length=200, verbose_name='Last Name')),
                ('birthday', models.DateField(default=datetime.date(1999, 6, 25), verbose_name='Birthday')),
                ('sex', models.CharField(choices=[('male', 'Male'), ('female', 'Female')], max_length=20, verbose_name='Sex')),
                ('contactNumber', models.CharField(default='09582488441', max_length=12, validators=[monitoring.models.validate_contact_number], verbose_name='Contact Number')),
                ('brgy_id', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='patients_brgy', to='monitoring.barangay', verbose_name='Barangay')),
                ('muni_id', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='patients_muni', to='monitoring.municipality', verbose_name='Municipality')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='patients', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name_plural': 'Patients',
            },
        ),
        migrations.CreateModel(
            name='Treatment',
            fields=[
                ('treatment_id', models.AutoField(primary_key=True, serialize=False)),
                ('vaccine_generic_name', models.CharField(choices=[('PCECCV', 'PCECCV'), ('PVRV', 'PVRV')], default='PCECCV', max_length=10, verbose_name='Vaccine Generic Name')),
                ('vaccine_brand_name', models.CharField(choices=[('Verorab', 'Verorab'), ('Speeda', 'Speeda'), ('Vaxirab', 'Vaxirab'), ('Abhayrab', 'Abhayrab')], default='Vaxirab', max_length=10, verbose_name='Vaccine Brand Name')),
                ('vaccine_route', models.CharField(choices=[('Intramuscular', 'Intramuscular'), ('Intradermal', 'Intradermal')], default='Intradermal', max_length=50, verbose_name='Vaccine Route')),
                ('day0', models.DateField(default=datetime.date(2024, 1, 6), verbose_name='Day 0')),
                ('day0_arrived', models.BooleanField(default=False, verbose_name='')),
                ('day3', models.DateField(default=datetime.date(2024, 1, 10), verbose_name='Day 3')),
                ('day3_arrived', models.BooleanField(default=False, verbose_name='')),
                ('day7', models.DateField(default=datetime.date(2024, 1, 13), verbose_name='Day 7')),
                ('day7_arrived', models.BooleanField(default=False, verbose_name='')),
                ('day14', models.DateField(blank=True, null=True, verbose_name='Day 14')),
                ('day28', models.DateField(blank=True, null=True, verbose_name='Day 28')),
                ('rig_given', models.DateField(blank=True, null=True, verbose_name='RIG')),
                ('animal_alive', models.BooleanField(default=True, null=True, verbose_name='Animal alive')),
                ('remarks', models.TextField(blank=True)),
                ('patient_id', models.ForeignKey(db_column='patient_id', on_delete=django.db.models.deletion.CASCADE, related_name='treatments_patient', to='monitoring.patient', verbose_name='Patient')),
            ],
            options={
                'verbose_name_plural': 'Treatment',
                'ordering': ['-patient_id'],
            },
        ),
        migrations.CreateModel(
            name='History',
            fields=[
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('registration_no', models.CharField(blank=True, max_length=200, null=True, verbose_name='Registration Number')),
                ('date_registered', models.DateField(default=datetime.date(2024, 1, 1), verbose_name='Date Registered')),
                ('date_of_exposure', models.DateField(blank=True, default=datetime.date(2024, 1, 1), null=True, verbose_name='Date of Exposure')),
                ('source_of_exposure', models.CharField(choices=[('Dog', 'Dog'), ('Cat', 'Cat'), ('Others', 'Others')], default='Cat', max_length=10, verbose_name='Animal')),
                ('exposure_type', models.CharField(choices=[('Bite', 'Bite'), ('Non-Bite', 'Non-Bite')], default='Bite', max_length=10, verbose_name='Type of Exposure')),
                ('bite_site', models.CharField(default='right thigh', max_length=100, verbose_name='Bite Site')),
                ('provoked_status', models.CharField(choices=[('Provoked', 'Provoked'), ('Unprovoked', 'Unprovoked')], default='Unprovoked', max_length=20, verbose_name='Provocation Status')),
                ('immunization_status', models.CharField(choices=[('Immunized', 'Immunized'), ('Unimmunized', 'Unimmunized')], default='Unimmunized', max_length=20, verbose_name='Animal Vaccination')),
                ('status_of_animal', models.CharField(choices=[('Alive', 'Alive'), ('Dead', 'Dead'), ('Killed', 'Killed'), ('Lost', 'Lost')], default='Lost', max_length=20, verbose_name='Animal Status')),
                ('confinement_status', models.CharField(choices=[('Stray', 'Stray'), ('Leashed/Caged', 'Leashed/Caged')], default='Stray', max_length=20, verbose_name='Confinement Status')),
                ('category_of_exposure', models.CharField(choices=[('I', 'I'), ('II', 'II'), ('III', 'III')], default='II', max_length=10, verbose_name='Exposure Category')),
                ('washing_hands', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='Yes', max_length=10, verbose_name='Washing Wound')),
                ('geom', django.contrib.gis.db.models.fields.PointField(blank=True, null=True, srid=4326, verbose_name='Geometry')),
                ('brgy_id', models.ForeignKey(db_column='brgy_id', default=1, on_delete=django.db.models.deletion.CASCADE, related_name='history_brgy', to='monitoring.barangay', verbose_name='Barangay of Exposure')),
                ('muni_id', models.ForeignKey(db_column='muni_id', default=1, on_delete=django.db.models.deletion.CASCADE, related_name='history_muni', to='monitoring.municipality', verbose_name='Municipality of Exposure')),
                ('patient_id', models.ForeignKey(db_column='patient_id', on_delete=django.db.models.deletion.CASCADE, related_name='histories', to='monitoring.patient', verbose_name='Patient')),
            ],
            options={
                'verbose_name_plural': 'History',
                'ordering': ['-registration_no'],
                'unique_together': {('registration_no', 'patient_id')},
            },
        ),
    ]
